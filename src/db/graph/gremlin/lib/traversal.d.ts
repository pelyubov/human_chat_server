/* eslint-disable @typescript-eslint/no-misused-new */
import type { Nullable } from '@Project.Utils/types';
import { Graph, TraversalStrategies, Bytecode } from './types';
import { Traverser } from './traverser';

export class Traversal<S, E> extends AsyncIterableIterator<E> /*, TraversalBase */ {
  constructor(
    graph: Nullable<Graph>,
    traversalStrategies: Nullable<TraversalStrategies>,
    bytecode: Bytecode
  ): Traversal<S, E>;
  /**
   * Returns generated bytecode of this traversal.
   */
  getBytecode(): Bytecode;
  /**
   * Execute the traversal and returns the next element.
   *
   * Throws an error if there are no more elements.
   */
  next(): Promise<IteratorResult<E, E>>;
  /**
   * Whether the traversal has more elements.
   */
  hasNext(): Promise<boolean>;
  /**
   * Iterates all traversers in the traversal.
   */
  iterate(): Promise<void>;
  /**
   * Put all results into an array.
   */
  toList(): Promise<Traverser<E>[]>;
  // toList(): Promise<E[]>; // * Adapted from runtime behavior
  toString(): string;
  [Symbol.asyncIterator](): AsyncIterableIterator<E>;
}
